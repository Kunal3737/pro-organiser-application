{"version":3,"sources":["components/Navigation/Navigation.js","components/Home/Home.js","components/Board/Board.js","components/Cards/Cards.js","components/Boards/Boards.js","App.js","serviceWorker.js","index.js"],"names":["Navigation","styleNav","color","textDecoration","className","to","style","axios","require","default","Home","useState","IsBlank","setIsBlank","myboard","setmyboard","history","useHistory","location","useLocation","state","porp","useEffect","console","log","get","then","response","data","fetchedResult","key","push","id","map","items","onClick","name","Board","createButtonHandler","e","a","preventDefault","myname","document","getElementById","value","myteam","teamMembersName","split","mytype","post","alert","onSubmit","htmlFor","required","type","placeholder","Modal","setAppElement","withRouter","props","match","params","members","allMembers","ColumnId","paramsId","ParamsId","myCards","setmyCards","cardDetailModal","setCardDetailModal","cardIdForCardDetail","setCardIdForCardDetail","editModal","setEditModal","editCardTitle","setEditCardTitle","editedTeamMembers","setEditedTeamMembers","editedDescription","setEditedDescription","editedDueDate","setEditedDueDate","changesSaved","setChangesSaved","archieveHandler","Object","entries","item","draggable","onDragStart","dataTransfer","setData","JSON","stringify","dragStart","cardId","cardClickHandler","title","icon","faList","Members","word","join","isOpen","cardTitle","cardDescription","cardDueDate","editHandler","Description","Due_Date","onChange","target","multiple","values","selectedOptions","opt","member","put","catch","error","saveEditedChanges","Boards","useParams","modal","setModal","myColumns","setmyColumns","CardModal","setCardModal","ColumnAdded","setColumnAdded","setMembers","Team","setTeam","Id","setId","Title","setTitle","setDescription","DueDate","setDueDate","ForCard","setForCard","Name","setName","forInitials","setForInitials","isColumnDelete","setIsColumnDelete","team","teamMembers","array","i","length","initial","addColumnHandler","column_name","cards","addCardHandler","cardDropped","newCard","cardHandler","parse","getData","delete","faTrashAlt","columnId","onDragOver","onDrop","description","dueDate","cardModal","forCard","App","exact","path","component","render","Boolean","window","hostname","ReactDOM","StrictMode","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.3e1fafb1.chunk.js","sourcesContent":["import React from 'react';\r\nimport {Link } from 'react-router-dom';\r\nimport '../Navigation/Navigation.css';\r\n\r\nfunction Navigation() {\r\n    \r\n    const styleNav = {\r\n        color : 'white',\r\n        textDecoration : 'none'\r\n    }\r\n\r\n    return (\r\n        <nav>\r\n            <h1>Pro-Organizer</h1>\r\n            <ul className=\"nav-links\">\r\n                <Link to=\"/\" style={styleNav}>\r\n                    <li>Home</li>\r\n                </Link>\r\n                <Link to=\"/createboard\" style={styleNav} >\r\n                    <li>Create a Board</li>\r\n                </Link>\r\n            </ul>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Navigation\r\n","import React from 'react';\r\nimport \"../Home/Home.css\";\r\n// import Axios from 'axios';\r\nimport {useEffect, useState} from 'react';\r\nimport { useHistory, useLocation } from 'react-router-dom';\r\nconst axios = require('axios').default;\r\n\r\nfunction Home() {\r\n    const [IsBlank, setIsBlank] = useState(false);\r\n    const [myboard, setmyboard] = useState([]);\r\n    const history = useHistory();\r\n    const location = useLocation();    \r\n    const [porp, setporp] = useState(location.state);\r\n\r\n    useEffect(() => {\r\n        console.log(porp);\r\n        axios.get(`https://pro-organizer-app-659cb.firebaseio.com/boards.json`)\r\n            .then(response => {\r\n                if (response.data === null) {\r\n                    setIsBlank(true);\r\n                }\r\n\r\n                console.log(\"Response\", response.data);\r\n\r\n                const fetchedResult = [];\r\n                for (let key in response.data){\r\n                    fetchedResult.push({\r\n                        ...response.data[key],\r\n                        id:key\r\n                    })\r\n                }\r\n                setmyboard(fetchedResult);\r\n            }\r\n    )},[porp])\r\n\r\n    if (IsBlank) {\r\n        return (\r\n            <p className=\"noBoard\"><strong>You haven't created any boards. Kindly click on the 'Create Board' button in the navigation bar to create a board.</strong></p>\r\n        )\r\n    }\r\n\r\n    if (!IsBlank) {\r\n        return (\r\n            <div>\r\n                <div>\r\n                    <>\r\n                        {myboard.map(items =>                        \r\n                            <div \r\n                                className=\"displayedBoards\" \r\n                                key={items.id}\r\n                                onClick={() => {\r\n                                    history.push(`/${items.id}/${items.name}`);\r\n                                    console.log(\"Item ID\",items.id);\r\n                                }}>\r\n                                <strong> {items.name} </strong>\r\n                                </div>\r\n                        )}\r\n                    </>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Home","import React, {useState} from 'react';\r\nimport '../Board/Board.css';\r\n// import Axios from 'axios';\r\nimport {useHistory} from 'react-router-dom';\r\nconst axios = require('axios').default;\r\n\r\nfunction Board() {\r\n    const history = useHistory();\r\n    console.log(history);\r\n\r\n    const createButtonHandler = async (e) => {\r\n        e.preventDefault();\r\n        let myname = document.getElementById('name').value;\r\n        console.log(myname);\r\n        let myteam = document.getElementById('team').value;\r\n        console.log(myteam);\r\n        let teamMembersName = myteam.split(\",\");\r\n        console.log(teamMembersName);\r\n        let mytype = document.getElementById('type').value;\r\n        console.log(mytype);\r\n\r\n        await axios.post(`https://pro-organizer-app-659cb.firebaseio.com/boards.json`, {\r\n            \"name\" : myname,\r\n            \"team\" : myteam,\r\n            \"type\" : mytype,\r\n        })\r\n        .then(response => {\r\n            console.log(response.data);\r\n        })\r\n\r\n        alert(`You successfully created a board named : \"${myname}\"`);\r\n        history.push('/', myname);\r\n    }\r\n\r\n    return (\r\n        <div className=\"wrapperDivBoard\">\r\n            <h2 className=\"boardHeading\">Create a Board</h2>\r\n            <form onSubmit={createButtonHandler} >\r\n                <label htmlFor=\"name\">Enter a name for your board</label><br/>\r\n                <input \r\n                    required \r\n                    className=\"inputFieldsForCAB\" \r\n                    type=\"text\" \r\n                    placeholder=\"e.g. Agile Sprint Board\" \r\n                    id=\"name\" />\r\n                <br/><br/>\r\n                <label htmlFor=\"team\" >Add your team members</label><br/>\r\n                <input \r\n                    required \r\n                    className=\"inputFieldsForCAB\" \r\n                    id=\"team\"\r\n                    type=\"text\" \r\n                    placeholder=\"Member names should be separated by commas\" />\r\n                <br/><br/>\r\n                <label htmlFor=\"type\" >Enter the type of your board</label><br/>\r\n                <input \r\n                    required \r\n                    className=\"inputFieldsForCAB\" \r\n                    id=\"type\" \r\n                    type=\"text\" \r\n                    placeholder=\"e.g. Design board, Testing board, etc.\" />\r\n                <br/><br/>\r\n                <button type=\"submit\" id=\"CreateBoard\" >Create</button>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Board\r\n","import React, { useState, useEffect } from \"react\";\r\n// import Axios from \"axios\";\r\nimport { withRouter } from \"react-router\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faList } from \"@fortawesome/free-solid-svg-icons\";\r\nimport \"../Cards/Cards.css\";\r\nimport Modal from \"react-modal\";\r\nconst axios = require('axios').default;\r\n\r\nModal.setAppElement(\"#root\");\r\nfunction Cards(props) {\r\n  console.log(props);\r\n  const { match, location, history } = props;\r\n  console.log(\"Match: \", match.params.name);\r\n  console.log(\"Location: \", location);\r\n  console.log(\"History: \", history);\r\n  console.log(\"Initials\", props.members);\r\n  console.log(props.id);\r\n  console.log(props.allMembers);\r\n\r\n  const [ColumnId, setColumnId] = useState(props.id);\r\n  const [ParamsId, setParamsId] = useState(props.paramsId);\r\n  const [myCards, setmyCards] = useState({});\r\n  const [cardDetailModal, setCardDetailModal] = useState(false);\r\n  const [cardIdForCardDetail, setCardIdForCardDetail] = useState(\"\");\r\n  const [editModal, setEditModal] = useState(false);\r\n  const [editCardTitle, setEditCardTitle] = useState(\"\");\r\n  const [editedTeamMembers, setEditedTeamMembers] = useState(\"\");\r\n  const [editedDescription, setEditedDescription] = useState(\"\");\r\n  const [editedDueDate, setEditedDueDate] = useState(\"\");\r\n  const [changesSaved, setChangesSaved] = useState(false);\r\n\r\n  useEffect(() => {\r\n    axios.get(\r\n      `https://pro-organizer-app-659cb.firebaseio.com/boards/${ParamsId}/column/${ColumnId}/cards.json`\r\n    ).then((response) => {\r\n      console.log(\"Cards Response: \", response.data);\r\n      setmyCards(response.data);\r\n      setChangesSaved(false);\r\n    });\r\n  }, [props.name, changesSaved]);\r\n\r\n  const cardClickHandler = (cardId) => {\r\n    setCardDetailModal(true);\r\n    setCardIdForCardDetail(cardId);\r\n  };\r\n\r\n  const editHandler = (e, cardTitle, cardDescription, cardDueDate) => {\r\n    e.preventDefault();\r\n    setEditModal(true);\r\n    setCardDetailModal(false);\r\n    setEditCardTitle(cardTitle);\r\n    setEditedDescription(cardDescription);\r\n    setEditedDueDate(cardDueDate);\r\n  };\r\n\r\n  const archieveHandler = () => {\r\n    // e.preventDefault();\r\n    console.log(\"Archieve Button Clicked\");\r\n  };\r\n\r\n  const saveEditedChanges = (e, id) => {\r\n    e.preventDefault();\r\n    const data = {\r\n      title: editCardTitle,\r\n      Description: editedDescription,\r\n      Due_Date: editedDueDate,\r\n      Members: editedTeamMembers,\r\n    };\r\n    axios.put(\r\n      `https://pro-organizer-app-659cb.firebaseio.com/boards/${ParamsId}/column/${ColumnId}/cards/${id}.json`,\r\n      data\r\n    )\r\n      .then((response) => {\r\n        console.log(response.data);\r\n        setChangesSaved(true);\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"Error at saveEditedChanges: \", error);\r\n      });\r\n    setEditModal(false);\r\n  };\r\n\r\n  const dragStart = (e, item, data) => {\r\n    // e.preventDefault();\r\n    // alert(card);\r\n    console.log(data);\r\n    e.dataTransfer.setData(\"text/plain\", JSON.stringify(item));\r\n    console.log(JSON.stringify(item));\r\n  };\r\n\r\n  // const dragOverCard = (e, dragOverCard) => {\r\n  //   // console.log(\"Card Drag Over\");\r\n  //   console.log(dragOverCard);\r\n  //   // e.preventDefault();\r\n  //   e.stopPropagation();\r\n  // }\r\n\r\n  return (\r\n    <div className=\"holdingCards\">\r\n      {myCards &&\r\n        Object.entries(myCards).map((item) => (\r\n          // console.log(item)\r\n          <div\r\n            key={item[0]}\r\n            id={item[0]}\r\n            className=\"cardsInternal\"\r\n            draggable=\"true\"\r\n            onDragStart={(e) => {\r\n              dragStart(e, item, props.data);\r\n            }}\r\n            onClick={(cardId) => {\r\n              cardClickHandler(item[0]);\r\n            }}\r\n          >\r\n            <div>{item[1].title}</div>\r\n            <FontAwesomeIcon icon={faList} />\r\n            <span className=\"initialsWrapper\">\r\n              {myCards &&\r\n                item[1].Members.map((items) => (\r\n                  <span key={items} className=\"initials\">\r\n                    {myCards &&\r\n                      items\r\n                        .split(\" \")\r\n                        .map((word) => word[0])\r\n                        .join(\"\")}\r\n                  </span>\r\n                ))}\r\n            </span>\r\n          </div>\r\n        ))}\r\n\r\n      {Object.entries(myCards).map((item) =>\r\n        item[0] == cardIdForCardDetail ? (\r\n          <Modal isOpen={cardDetailModal}>\r\n            <div className=\"headerContainer\">\r\n              <span>\r\n                <h3>{item[1].title}</h3>\r\n                <h4>in {match.params.name}</h4>\r\n              </span>\r\n              <span>\r\n                <button\r\n                  className=\"editCardDetail\"\r\n                  onClick={(e, cardTitle, cardDescription, cardDueDate) => {\r\n                    editHandler(\r\n                      e,\r\n                      item[1].title,\r\n                      item[1].Description,\r\n                      item[1].Due_Date\r\n                    );\r\n                  }}\r\n                >\r\n                  Edit\r\n                </button>\r\n                <button className=\"archiveCardDetail\" onClick={archieveHandler}>\r\n                  Archive\r\n                </button>\r\n              </span>\r\n            </div>\r\n            <hr />\r\n            <h3>Description</h3>\r\n            <div>{item[1].Description}</div>\r\n            <h3>Members</h3>\r\n            <div>\r\n              {item[1].Members.map((items) => (\r\n                <span key={items} className=\"initials\">\r\n                  {items\r\n                    .split(\" \")\r\n                    .map((word) => word[0])\r\n                    .join(\"\")}\r\n                </span>\r\n              ))}\r\n            </div>\r\n            <h3>Due Date</h3>\r\n            <div> {item[1].Due_Date} </div>\r\n            <br />\r\n            <button\r\n              className=\"closeCardDetailModal\"\r\n              onClick={() => {\r\n                setCardDetailModal(false);\r\n              }}\r\n            >\r\n              Close\r\n            </button>\r\n          </Modal>\r\n        ) : (\r\n          <></>\r\n        )\r\n      )}\r\n\r\n      {/* Modal for Editing Card Details */}\r\n      {Object.entries(myCards).map((item) =>\r\n        // console.log(item)\r\n        item[0] == cardIdForCardDetail ? (\r\n          <Modal isOpen={editModal}>\r\n            <p className=\"boardName\">Edit {item[1].title} Card</p>\r\n            <form>\r\n              <label htmlFor=\"title\">Edit the title of your card</label>\r\n              <br />\r\n              <input\r\n                type=\"text\"\r\n                id=\"title\"\r\n                value={editCardTitle}\r\n                onChange={(e) => {\r\n                  setEditCardTitle(e.target.value);\r\n                  console.log(editCardTitle);\r\n                }}\r\n              />\r\n              <br />\r\n              <br />\r\n\r\n              <label htmlFor=\"membersName\">\r\n                Choose members for this task (select multiple, if needed)\r\n              </label>\r\n              <br />\r\n              <select\r\n                id=\"membersName\"\r\n                multiple\r\n                onChange={(e) => {\r\n                  const values = [...e.target.selectedOptions].map(\r\n                    (opt) => opt.value\r\n                  );\r\n                  setEditedTeamMembers(values);\r\n                  console.log(editedTeamMembers);\r\n                }}\r\n              >\r\n                <option>Please select atleast one team member</option>\r\n                {props.allMembers.map((member) => (\r\n                  <option value={member} key={member}>\r\n                    {member}\r\n                  </option>\r\n                ))}\r\n              </select>\r\n              <br />\r\n              <br />\r\n\r\n              <label htmlFor=\"description\">\r\n                Edit the description of your task\r\n              </label>\r\n              <br />\r\n              <input\r\n                type=\"text\"\r\n                id=\"description\"\r\n                placeholder=\"Add your description here\"\r\n                value={editedDescription}\r\n                onChange={(e) => {\r\n                  setEditedDescription(e.target.value);\r\n                }}\r\n              />\r\n              <br />\r\n              <br />\r\n\r\n              <label htmlFor=\"due_date\">Edit the due date for this task</label>\r\n              <br />\r\n              <input\r\n                type=\"date\"\r\n                value={editedDueDate}\r\n                onChange={(e) => {\r\n                  setEditedDueDate(e.target.value);\r\n                }}\r\n                id=\"due_date\"\r\n              />\r\n              <br />\r\n              <br />\r\n\r\n              <button\r\n                id=\"CreateCard\"\r\n                onClick={(e, id) => {\r\n                  saveEditedChanges(e, item[0]);\r\n                }}\r\n              >\r\n                Save Changes\r\n              </button>\r\n              <button\r\n                onClick={() => {\r\n                  setEditModal(false);\r\n                }}\r\n              >\r\n                Cancel\r\n              </button>\r\n            </form>\r\n          </Modal>\r\n        ) : (\r\n          <></>\r\n        )\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default withRouter(Cards);\r\n","import React from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faTrashAlt } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport \"../Boards/Boards.css\";\r\nimport { useState, useEffect } from \"react\";\r\nimport Modal from \"react-modal\";\r\n// import Axios from \"axios\";\r\nimport Cards from \"../Cards/Cards\";\r\nconst axios = require('axios').default;\r\n\r\nModal.setAppElement(\"#root\");\r\nfunction Boards(props) {\r\n  console.log(\"Props Location: \", props);\r\n  const params = useParams();\r\n  console.log(\"Params:\", params);\r\n  const [modal, setModal] = useState(false);\r\n  const [myColumns, setmyColumns] = useState([]);\r\n  const [CardModal, setCardModal] = useState(false);\r\n  const [ColumnAdded, setColumnAdded] = useState(false);\r\n  const [Members, setMembers] = useState([]);\r\n  const [MemberSelected, setMemberSelected] = useState(false);\r\n  const [Team, setTeam] = useState(\"\");\r\n  const [Id, setId] = useState(\"\");\r\n  const [Title, setTitle] = useState(\"\");\r\n  const [paramsId, setparamsId] = useState(params.id);\r\n  const [Description, setDescription] = useState(\"\");\r\n  const [DueDate, setDueDate] = useState(\"\");\r\n  const [ForCard, setForCard] = useState(false);\r\n  const [Name, setName] = useState([]);\r\n  const [forInitials, setForInitials] = useState([]);\r\n  const [isColumnDelete, setIsColumnDelete] = useState(false);\r\n  console.log(forInitials);\r\n  console.log(\"Team: \", Team);\r\n\r\n  useEffect(() => {\r\n    setColumnAdded(false);\r\n    // For fetching column\r\n    axios.get(\r\n      `https://pro-organizer-app-659cb.firebaseio.com/boards/${paramsId}/column.json`\r\n    )\r\n      .then((response) => {\r\n        console.log(\"Get Response: \", response.data);\r\n        const fetchedResult = [];\r\n        for (let key in response.data) {\r\n          fetchedResult.push({\r\n            ...response.data[key],\r\n            id: key,\r\n          });\r\n        }\r\n        console.log(\"Id: \", fetchedResult);\r\n        setmyColumns(fetchedResult);\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n\r\n    // For fetching Members Name\r\n    axios.get(\r\n      `https://pro-organizer-app-659cb.firebaseio.com/boards/${paramsId}.json`\r\n    )\r\n      .then((response) => {\r\n        console.log(\"Members\", response.data.team);\r\n        const teamMembers = response.data.team.split(\",\");\r\n        console.log(\"Team Members\", teamMembers);\r\n        setMembers(teamMembers);\r\n        var array = [];\r\n        for (var i = 0; i < teamMembers.length; i++) {\r\n          console.log(\"Team Member\", teamMembers[i]);\r\n          var initial = teamMembers[i]\r\n            .split(\" \")\r\n            .map((word) => {\r\n              return word[0];\r\n            })\r\n            .join(\"\");\r\n          console.log(\"Initial\", initial);\r\n          array.push(initial);\r\n          setForInitials(array);\r\n        }\r\n        console.log(\"Array\", array);\r\n        console.log(\"For Initials\", forInitials);\r\n      })\r\n\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n    setIsColumnDelete(false);\r\n  }, [ColumnAdded, !CardModal, isColumnDelete]);\r\n\r\n  const addColumnHandler = async (e) => {\r\n    e.preventDefault();\r\n    const column_name = document.getElementById(\"column_name\").value;\r\n    console.log(column_name);\r\n\r\n    await axios.post(\r\n      `https://pro-organizer-app-659cb.firebaseio.com/boards/${params.id}/column.json`,\r\n      {\r\n        column_name: column_name,\r\n        cards: null,\r\n      }\r\n    )\r\n      .then((response) => {\r\n        console.log(\"RESPONSE\", response.data);\r\n        console.log(\"From Axios\", column_name);\r\n        console.log(\"key: \", response.data.name);\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n    setModal(false);\r\n    setColumnAdded(true);\r\n  };\r\n\r\n  const addCardHandler = async (e) => {\r\n    e.preventDefault();\r\n    setTitle(document.getElementById(\"title\").value);\r\n    console.log(\"Title :\", Title);\r\n    setDescription(document.getElementById(\"description\").value);\r\n    setDueDate(document.getElementById(\"due_date\").value);\r\n    await axios.post(\r\n      `https://pro-organizer-app-659cb.firebaseio.com/boards/${paramsId}/column/${Id}/cards.json`,\r\n      {\r\n        title: document.getElementById(\"title\").value,\r\n        Members: Team,\r\n        Description: document.getElementById(\"description\").value,\r\n        Due_Date: document.getElementById(\"due_date\").value,\r\n      }\r\n    ).then((response) => {\r\n      console.log(response.data);\r\n      setName(response.data);\r\n    });\r\n    setCardModal(false);\r\n    setForCard(true);\r\n  };\r\n\r\n  const deleteBoardHandler = () => {\r\n    axios.delete(\r\n      `https://pro-organizer-app-659cb.firebaseio.com/boards/${paramsId}.json`\r\n    )\r\n      .then((response) => {\r\n        console.log(response.data);\r\n        props.history.push(\"/\");\r\n      })\r\n      .then((error) => {\r\n        console.log(error);\r\n      });\r\n  };\r\n\r\n  const deleteColumnHandler = (columnId) => {\r\n    axios.delete(\r\n      `https://pro-organizer-app-659cb.firebaseio.com/boards/${paramsId}/column/${columnId}.json`\r\n    )\r\n      .then((response) => {\r\n        console.log(response.data);\r\n        setIsColumnDelete(true);\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n  };\r\n\r\n  const cardHandler = (newCard) => {\r\n    console.log(newCard);\r\n  };\r\n\r\n  const cardDropped = (e, items) => {\r\n    e.preventDefault();\r\n    let newCard = JSON.parse(e.dataTransfer.getData(\"text/plain\"));\r\n    // console.log(items);\r\n    cardHandler(newCard);\r\n    // e.target.appendChild(newCard);\r\n    // this.props.droppedCard(newCard, this.props.card_column);\r\n  };\r\n\r\n  return (\r\n    <div className=\"outerBoards\">\r\n      <p className=\"headerBoard\">\r\n        <span className=\"boardName\">{params.name} Board</span>\r\n        <button className=\"deleteBoard\" onClick={deleteBoardHandler}>\r\n          Delete Board\r\n        </button>\r\n      </p>\r\n      <div className=\"combiningArrayAndAddColumnButton\">\r\n        <div className=\"mappingColumns\">\r\n          {myColumns.map((items) => (\r\n            <div key={items.id} className=\"outerColumnDiv\">\r\n              <div className=\"myColumn\">\r\n                <div className=\"forDustbin\">\r\n                  {items.column_name}\r\n                  <FontAwesomeIcon\r\n                    icon={faTrashAlt}\r\n                    onClick={(id) => {\r\n                      deleteColumnHandler(items.id);\r\n                    }}\r\n                  />\r\n                </div>\r\n                <div\r\n                  className=\"holdingCards\"\r\n                  onDragOver={(e) => {\r\n                    e.preventDefault();\r\n                    console.log(e.target);\r\n                  }}\r\n                  onDrop={(e, items) => {\r\n                    cardDropped(e, items);\r\n                  }}\r\n                >\r\n                  {items.cards && (\r\n                    <Cards\r\n                      members={forInitials}\r\n                      data={items}\r\n                      allMembers={Members}\r\n                      title={Title}\r\n                      paramsId={paramsId}\r\n                      id={items.id}\r\n                      description={Description}\r\n                      dueDate={DueDate}\r\n                      cardModal={CardModal}\r\n                      forCard={ForCard}\r\n                      name={Name}\r\n                    />\r\n                  )}\r\n                </div>\r\n                <button\r\n                  className=\"addCard\"\r\n                  onClick={() => {\r\n                    setCardModal(true);\r\n                    setForCard(false);\r\n                    setId(items.id);\r\n                  }}\r\n                >\r\n                  Add a card\r\n                </button>\r\n              </div>\r\n            </div>\r\n          ))}\r\n        </div>\r\n        <div\r\n          className=\"addColumn\"\r\n          onClick={() => {\r\n            setModal(true);\r\n          }}\r\n        >\r\n          <p className=\"columnbutton\">Add a column</p>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Modal for Adding Column */}\r\n      <Modal isOpen={modal}>\r\n        <p className=\"boardName\">Add Column</p>\r\n        <form>\r\n          <label>Enter a column name:</label>\r\n          <input id=\"column_name\" type=\"text\" />\r\n          <br />\r\n          <button\r\n            id=\"CreateColumn\"\r\n            type=\"button\"\r\n            onClick={(e) => {\r\n              addColumnHandler(e);\r\n            }}\r\n          >\r\n            Add Column\r\n          </button>\r\n          <button\r\n            id=\"closeModal\"\r\n            onClick={() => {\r\n              setModal(false);\r\n            }}\r\n          >\r\n            Close\r\n          </button>\r\n        </form>\r\n      </Modal>\r\n\r\n      {/*\r\n             Modal for Adding Card */}\r\n      <Modal isOpen={CardModal}>\r\n        <p className=\"boardName\">Add Card</p>\r\n        <form>\r\n          <label htmlFor=\"title\">Enter a title for your task</label>\r\n          <br />\r\n          <input type=\"text\" id=\"title\" placeholder=\"e.g. Add a new icon\" />\r\n          <br />\r\n          <br />\r\n\r\n          <label htmlFor=\"membersName\">\r\n            Choose members for this task (select multiple, if needed)\r\n          </label>\r\n          <br />\r\n          <select\r\n            id=\"membersName\"\r\n            multiple\r\n            onChange={(e) => {\r\n              const values = [...e.target.selectedOptions].map(\r\n                (opt) => opt.value\r\n              );\r\n              setTeam(values);\r\n            }}\r\n          >\r\n            <option>Please select atleast one team member</option>\r\n            {Members.map((member) => (\r\n              <option value={member} key={member}>\r\n                {member}\r\n              </option>\r\n            ))}\r\n          </select>\r\n          <br />\r\n          <br />\r\n\r\n          <label htmlFor=\"description\">Add the description for your task</label>\r\n          <br />\r\n          <input\r\n            type=\"text\"\r\n            id=\"description\"\r\n            placeholder=\"Add your description here\"\r\n          />\r\n          <br />\r\n          <br />\r\n\r\n          <label htmlFor=\"due_date\">Select the due date for this task</label>\r\n          <br />\r\n          <input type=\"date\" id=\"due_date\" />\r\n          <br />\r\n          <br />\r\n          <button id=\"CreateCard\" onClick={addCardHandler}>\r\n            Add Card\r\n          </button>\r\n          <button\r\n            onClick={() => {\r\n              console.log(\"Team\", Team);\r\n              setCardModal(false);\r\n            }}\r\n          >\r\n            Cancel\r\n          </button>\r\n        </form>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Boards;\r\n","import React from 'react';\n/* import './App.css'; */\nimport {BrowserRouter as Router, Switch, Route} from 'react-router-dom';\nimport Navigation from './components/Navigation/Navigation'\nimport Home from './components/Home/Home';\nimport Board from './components/Board/Board';\nimport Boards from './components/Boards/Boards';\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"App\">\n        <Navigation/>\n        <Switch>\n          <Route exact path=\"/\" component={Home} />\n          <Route path=\"/createboard\" component={Board} />\n          <Route path=\"/:id/:name\" component={Boards} />\n          <Route render={() => <h2>404 Page Not Found</h2>} />\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}